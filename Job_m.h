

#ifndef __RUBIS_JOB_M_H
#define __RUBIS_JOB_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef RUBIS_API
#  if defined(RUBIS_EXPORT)
#    define RUBIS_API  OPP_DLLEXPORT
#  elif defined(QUEUEING_IMPORT)
#    define RUBIS_API  OPP_DLLIMPORT
#  else
#    define RUBIS_API
#  endif
#endif


class Job;


// cplusplus {{
#include "QueueingDefs.h"
// }}


class RUBIS_API Job_Base : public ::omnetpp::cMessage
{
  protected:
    int priority = 0;
    ::omnetpp::simtime_t totalQueueingTime = SIMTIME_ZERO;
    ::omnetpp::simtime_t totalServiceTime = SIMTIME_ZERO;
    ::omnetpp::simtime_t totalDelayTime = SIMTIME_ZERO;
    int queueCount = 0;
    int delayCount = 0;
    int generation = 0;

  private:
    void copy(const Job_Base& other);

  protected:
    bool operator==(const Job_Base&) = delete;
    // make constructors protected to avoid instantiation
    Job_Base(const char *name=nullptr, short kind=0);
    Job_Base(const Job_Base& other);
    // make assignment operator protected to force the user override it
    Job_Base& operator=(const Job_Base& other);

  public:
    virtual ~Job_Base();
    virtual Job_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class Job");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPriority() const;
    virtual void setPriority(int priority);

    virtual ::omnetpp::simtime_t getTotalQueueingTime() const;
    virtual void setTotalQueueingTime(::omnetpp::simtime_t totalQueueingTime);

    virtual ::omnetpp::simtime_t getTotalServiceTime() const;
    virtual void setTotalServiceTime(::omnetpp::simtime_t totalServiceTime);

    virtual ::omnetpp::simtime_t getTotalDelayTime() const;
    virtual void setTotalDelayTime(::omnetpp::simtime_t totalDelayTime);

    virtual int getQueueCount() const;
    virtual void setQueueCount(int queueCount);

    virtual int getDelayCount() const;
    virtual void setDelayCount(int delayCount);

    virtual int getGeneration() const;
    virtual void setGeneration(int generation);
};
namespace omnetpp {

template<> inline Job_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Job_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __QUEUEING_JOB_M_H


